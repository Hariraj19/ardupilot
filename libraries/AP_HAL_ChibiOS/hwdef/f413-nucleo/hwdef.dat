# hw definition file for processing by chibios_pins.py
# STM32F413 layout

MCU STM32F4xx STM32F413xH
define STM32F413_MCUCONF
define STM32F413xx

# board ID for firmware load
APJ_BOARD_ID 92

RAM_SIZE_KB 320
FLASH_SIZE_KB 1536
#FLASH_SIZE_KB 1024

# crystal frequency
OSCILLATOR_HZ 16000000

# have app start at first flash index instead of saving space for a bootloader
FLASH_RESERVE_START_KB 0

# reserve 16k for bootloader and 32k for storage
#FLASH_RESERVE_START_KB 48

STM32_HSI_ENABLED TRUE
STM32_HSE_ENABLED FALSE
STM32_PLLM_VALUE 16
STM32_PLLN_VALUE 192
STM32_PLLP_VALUE 2
STM32_PLLQ_VALUE 2
STM32_PLLSRC STM32_PLLSRC_HSI
STM32_PREE1  STM32_PREE1_DIV2
STM32_PREE2  STM32_PREE2_DIV1

STM32_PWM_USE_TIM3 TRUE

# board voltage
STM32_VDD 330U

RAM_SIZE_KB 320

# flash size
FLASH_SIZE_KB 1536

# serial port for stdout
STDOUT_SERIAL SD2
STDOUT_BAUDRATE 115200

# order of I2C buses
I2C_ORDER I2C1

# EEPROM supports 400KHz, 400 is conservative
define HAL_I2C_MAX_CLOCK 400000

# run SPI bus thread at high priority for IMU
#define APM_SPI_PRIORITY 181

# order of UARTs
#UART_ORDER USART2 USART5 USART1
UART_ORDER USART2 USART1

# All pins
#PA0 ACCEL_INT3 INPUT               # ACCEL_INT3
#PA1 TIM2_CH2 TIM2 PWM(1)            # SERVO2
PA2 USART2_TX USART2                # SC_UART2_TX
PA3 USART2_RX USART2                # SC_UART2_RX
PA4 AUX_ADC0 ADC1                   # AD0
PA5 AUX_ADC1 ADC1                   # AD1
PA6 AUX_ADC2 ADC1                   # AD2
PA7 AUX_ADC3 ADC1                   # AD3
#PA8 TACHO0 ADC1                    # TACHO0 **NOTE** There's no ADC here, the Tacho must be a pulse
PA9 USART1_TX USART1                # SBUS_OUT
PA10 USART1_RX USART1               # SBUS_IN
PA11 CAN1_RX CAN1                   # SC_CAN_RX
PA12 CAN1_TX CAN1                   # SC_CAN_TX
PA13 JTMS-SWDIO SWD                 # SC_SWDIO
PA14 JTCK-SWCLK SWD                 # SC_SWCLK
PA15 GYRO_CS CS                     # SC_SPI1CS0
PB1 ACCEL_INT1 INPUT                # ACCEL_INT1
#PB0 (unused)
PB2 ACCEL_DRDY INPUT                # ACCEL_DRDY
PB3 SPI1_SCK SPI1                   # SC_SCLK1
PB4 SPI1_MISO SPI1                  # SC_MISO1
PB5 SPI1_MOSI SPI1                  # SC_MOSI1
PB6 I2C1_SCL I2C1                   # SC_I2C1_SCL
PB7 I2C1_SDA I2C1                   # SC_I2C1_SDA
#PB8 UART5_RX UART5 NODMA            # SC_UART5_RX from uBlox GPS
#PB9 UART5_TX UART5 NODMA            # SC_UART5_TX  to  uBlox GPS
PB10 EEPROM_WE OUTPUT HIGH GPIO(0)  # SC_WC
#PB11 (NOT AVAILABLE ON LOW PIN COUNT)
PB12 FEEDBACK2 INPUT                # FEEDBACK2
PB13 FEEDBACK1 INPUT                # FEEDBACK1
PB14 GYRO_INT1 INPUT                # GYRO_INT1
PB15 GYRO_RESET OUTPUT HIGH GPIO(1) # GYRO_nRESET
PC13 BARO_CS CS                     # SC_SPI1CS1
PC14 ACCEL_CS CS                    # SC_SPI1CS2
#PC15 (unused)
#PH0 OSC_IN 16MHz
#PH1 OSC_OUT 16MHz

# SPI Device table
#SPIDEV bmp280       SPI1 DEVID1 BARO_CS MODE0 10*MHZ 10*MHZ
SPIDEV bmc150       SPI1 DEVID1 ACCEL_CS MODE0 10*MHZ 10*MHZ
SPIDEV fxas21002    SPI1 DEVID2 GYRO_CS  MODE3 2*MHZ 2*MHZ



# SPI2 for the sensors needs exclusive access - it's a busy bus!
DMA_PRIORITY SPI1_*
DMA_NOSHARE SPI1_*

# reserve 16k for bootloader and 32k for storage
#FLASH_RESERVE_START_KB 48
FLASH_RESERVE_START_KB 0

define HAL_CHIBIOS_ARCH_F413 1

define HAL_INS_DEFAULT HAL_INS_NONE
define HAL_INS_DEFAULT_ROTATION ROTATION_NONE
#define HAL_BARO_DEFAULT HAL_BARO_BMP280_SPI
#define HAL_BARO_DEFAULT HAL_BARO_NONE

# storage
define HAL_STORAGE_I2C 1
define HAL_STORAGE_I2C_ADDR 0xA0
define HAL_STORAGE_SIZE 16384

#define STORAGE_FLASH_PAGE	 1
define HAL_USE_EMPTY_STORAGE 1
define HAL_STORAGE_SIZE 16384

#define CHIBIOS_ADC_MAVLINK_DEBUG 0     # this looks interesting

# unstick 20789 on I2C on boot
define HAL_I2C_CLEAR_BUS

define CONFIG_HAL_BOARD_SUBTYPE HAL_BOARD_SUBTYPE_CHIBIOS_F413
